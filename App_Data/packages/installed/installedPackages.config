<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="1" version="1.2" url="" name="DAMP Property Editor Value Converter" folder="a599d876-5052-40fa-b45f-16a8b28ccbd6" packagepath="" repositoryGuid="" packageGuid="" hasUpdate="False" enableSkins="False" skinRepoGuid="00000000-0000-0000-0000-000000000000">
    <license url="http://www.opensource.org/licenses/mit-license.php">MIT license</license>
    <author url="http://our.umbraco.org/member/4297">Jeroen Breuer</author>
    <readme><![CDATA[With the DAMP Property Editor Value Converter it's easier to use DAMP in Razor. It can work with the xml or id's that DAMP saves. If you do Model.propertyName it will return a List of DAMP_Item-objects you can loop through.  It also has the following properties/methods:

IsXml - Returns a boolean if the data is stored as xml.
PropertyData - Returns a string with the raw data.
Count - Returns how many media items are selected.
First - Returns the first item from the List<DAMP_Item>
Any - Returns a boolean to see if any items are selected.
Xml - Returns all media items as DynamicXml.
Skip(int) - Used for paging.
Take(int) - Used for paging.

Each DAMP_Item-object has the following properties: 

Id - Returns the id of the media item.
Name - Returns the name of the media item.
Type - Returns the Media Type of the media item.
File - Returns the url of the media item if it exists.
Url - Also returns the url of the media item if it exists.
Alt - Returns the alt property. If it doesn't exist it will return the name.
Resized - Returns the resized property if it exists.
Xml - Returns the current media item as DynamicXml.
Children - Returns the children of this media item as List<DAMP_Item>
Crops - Returns a DynamicDictionary with all the crops.
TypedCrops - Returns the crops as a Dictionary<string, string>.]]></readme>
    <actions>
    </actions>
    <datatypes>
    </datatypes>
    <content nodeId="" loadChildNodes="False">
    </content>
    <templates>
    </templates>
    <stylesheets>
    </stylesheets>
    <documenttypes>
    </documenttypes>
    <macros>
    </macros>
    <files>
      <file>/bin/DAMP.PropertyEditorValueConverter.dll</file>
    </files>
    <languages>
    </languages>
    <dictionaryitems>
    </dictionaryitems>
    <loadcontrol>
    </loadcontrol>
  </package>
  <package id="2" version="1.2" url="" name="DAMP Razor Model" folder="98b11a07-105b-4b81-8de3-1e9c07f2f02d" packagepath="" repositoryGuid="" packageGuid="" hasUpdate="False" enableSkins="False" skinRepoGuid="00000000-0000-0000-0000-000000000000">
    <license url="http://www.opensource.org/licenses/mit-license.php">MIT license</license>
    <author url="http://our.umbraco.org/member/4297">Jeroen Breuer</author>
    <readme><![CDATA[With the DAMP Razor Model it's easier to use DAMP in Razor. It can work with the xml or id's that DAMP saves. If you do Model.propertyName it will return a List of DAMP_Item-objects you can loop through.  It also has the following properties/methods:

IsXml - Returns a boolean if the data is stored as xml.
PropertyData - Returns a string with the raw data.
DynamicMediaList - Returns all media items as a DynamicMediaList.
Count - Returns how many media items are selected.
First - Returns the first item from the List<DAMP_Item>
Any - Returns a boolean to see if any items are selected.
Xml - Returns all media items as DynamicXml.
Skip(int) - Used for paging.
Take(int) - Used for paging.

Each DAMP_Item-object has the following properties: 

Id - Returns the id of the media item.
Name - Returns the name of the media item.
Type - Returns the Media Type of the media item.
File - Returns the url of the media item if it exists.
Url - Also returns the url of the media item if it exists.
Alt - Returns the alt property. If it doesn't exist it will return the name.
Resized - Returns the resized property if it exists.
Xml - Returns the current media item as DynamicXml.
Children - Returns the children of this media item as List<DAMP_Item>
Crops - Returns a DynamicDictionary with all the crops.
TypedCrops - Returns the crops as a Dictionary<string, string>.]]></readme>
    <actions>
    </actions>
    <datatypes>
    </datatypes>
    <content nodeId="" loadChildNodes="False">
    </content>
    <templates>
    </templates>
    <stylesheets>
    </stylesheets>
    <documenttypes>
    </documenttypes>
    <macros>
    </macros>
    <files>
      <file>/bin/DAMP.RazorModel.dll</file>
    </files>
    <languages>
    </languages>
    <dictionaryitems>
    </dictionaryitems>
    <loadcontrol>
    </loadcontrol>
  </package>
  <package id="3" version="2.5" url="" name="Digibiz Advanced Media Picker" folder="ed1c2ecf-0e65-4c41-828f-c92a3b7b6a41" packagepath="" repositoryGuid="" packageGuid="" hasUpdate="False" enableSkins="False" skinRepoGuid="00000000-0000-0000-0000-000000000000">
    <license url="http://www.opensource.org/licenses/mit-license.php">MIT license</license>
    <author url="http://our.umbraco.org/member/4297">Jeroen Breuer</author>
    <readme><![CDATA[The Digibiz Advanced Media Picker 2.5 (DAMP 2.5) is a media picker with many awesome features. It can be used instead of the default media picker and is very user friendly. Here is a list of things it can do: 

- Store the complete media item in the umbraco xml (umbraco.config) or only the id. 
- Store a single or multiple media items in the media picker. 
- Define a minimum and maximum amount of media items. 
- Define a start node for the media tree. This can be done by a picker or XPath. 
- Choose which file extensions are allowed. 
- Choose which Media Types are allowed for selection and creation. 
- Edit the media item from the content section. 
- Use Pixlr (photoshop look a like) to modify images. 
- Fast performance using the Umbraco cache.
- Search]]></readme>
    <actions>
    </actions>
    <datatypes>
    </datatypes>
    <content nodeId="" loadChildNodes="False">
    </content>
    <templates>
    </templates>
    <stylesheets>
    </stylesheets>
    <documenttypes>
    </documenttypes>
    <macros>
    </macros>
    <files>
      <file>/bin/DigibizAdvancedMediaPicker.dll</file>
      <file>/bin/DigibizTree.dll</file>
      <file>//crossdomain.xml</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Audio_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/CreateMediaItem.aspx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/DAMPScript.js</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/DAMPStyles.css</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/DAMP_ImagePreview.ashx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Delete.gif</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/DigibizAdvancedMediaPicker.ascx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/DigibizService.asmx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Doc_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/EditDAMP.aspx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Excel_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/File_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Folder_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Installer.ascx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Logo.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Pdf_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Pixlr.aspx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Power_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/SavePixlr.aspx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/SelectMediaItem.aspx</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Text_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Video_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Zip_icon.png</file>
      <file>/Umbraco/plugins/DigibizAdvancedMediaPicker/Installer.ascx</file>
    </files>
    <languages>
    </languages>
    <dictionaryitems>
    </dictionaryitems>
    <loadcontrol>
    </loadcontrol>
  </package>
  <package id="4" version="2.5.7" url="" name="ImageGen" folder="09bd5080-c1b0-4cd1-84ad-2a1e2f03e2b0" packagepath="" repositoryGuid="" packageGuid="" hasUpdate="False" enableSkins="False" skinRepoGuid="00000000-0000-0000-0000-000000000000">
    <license url="http://www.opensource.org/licenses/mit-license.php">Proprietary License</license>
    <author url="http://www.percipientstudios.com">Douglas Robar</author>
    <readme><![CDATA[ImageGen 2.5.7

Create high-quality, perfectly sized images for photo galleries, product images, staff profiles, and more. Add watermarks and overlays, rotate, resize, crop, convert image formats, and more with thirty powerful features. Create graphical text from all TrueType fonts with complete control over size, style, color, lineheight, and more for headlines and menus. High performance server and client caching. 

Don’t waste your valuable time manually creating, resizing, or editing each image in Photoshop. ImageGen is an easy-to-use application for your Umbraco or ASP.NET 2.0+ website that automatically resizes photos, screenshots, and images from icon to thumbnail to full-screen sizes.

ImageGen can create text graphics as well as overlay text on images, which is particularly useful for making image-based navigation with styled dynamic text on top. And ImageGen can automatically protect and brand your images with watermarks and corporate logos.

With more than 30 options, ImageGen can create hundreds of thousands of variations to meet virtually any need. ImageGen is easy to install and use on your website. ImageGen creates extremely high-quality images quickly. And ImageGen’s advanced caching means images are served immediately for fast and responsive websites.

Extensive documentation.]]></readme>
    <actions>
    </actions>
    <datatypes>
    </datatypes>
    <content nodeId="" loadChildNodes="False">
    </content>
    <templates>
    </templates>
    <stylesheets>
    </stylesheets>
    <documenttypes>
    </documenttypes>
    <macros>
    </macros>
    <files>
      <file>/bin/imagegen.dll</file>
      <file>/config/ImageGen.config</file>
      <file>//ImageGen.ashx</file>
      <file>/usercontrols/ImageGenInstaller.ascx</file>
    </files>
    <languages>
    </languages>
    <dictionaryitems>
    </dictionaryitems>
    <loadcontrol>
    </loadcontrol>
  </package>
  <package id="5" version="1.0" url="" name="RVCountries - Multilingual Country List DropDown" folder="b5f54b22-0782-4caf-bbda-5dee6093adde" packagepath="" repositoryGuid="" packageGuid="" hasUpdate="False" enableSkins="False" skinRepoGuid="00000000-0000-0000-0000-000000000000">
    <license url="http://www.opensource.org/licenses/mit-license.php">MIT license</license>
    <author url="http://www.thereturnvalue.com">Eran Meir</author>
    <readme><![CDATA[What is this package for?

The RVCountries package allows you to easily place a dropdown list of countries in forms.
The list of countries is generated from list of dictionary items so you can use a translated list of your own language.

Main Features

Razor Syntex
More than 250 countries in the list.
Multi language support
 The package comes with list of countries written in English and Hebrew.
If you didn't create a language of "Hebrew (Israel)" in Umbraco, the package will only add the dictionary items with the values written in English. 

Using

Place the RVCountries Dropdown macro in your template or rich text editor.
<umbraco:Macro Alias="RVCountriesDropdown" runat="server"></Umbraco:Macro>

Another option is to call directly to the macro from another macro using RenderPage. Ex:
@RenderPage("RVCountriesDropdown.cshtml")

Enjoy and vote if you like it!]]></readme>
    <actions>
    </actions>
    <datatypes>
    </datatypes>
    <content nodeId="" loadChildNodes="False">
    </content>
    <templates>
    </templates>
    <stylesheets>
    </stylesheets>
    <documenttypes>
    </documenttypes>
    <macros>1</macros>
    <files>
      <file>/macroScripts/RVCountriesDropdown.cshtml</file>
      <file>/macroScripts/RVCountriesDropdown.cshtml</file>
    </files>
    <languages>
    </languages>
    <dictionaryitems>1</dictionaryitems>
    <loadcontrol>
    </loadcontrol>
  </package>
</packages>